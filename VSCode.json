{
	// Place your snippets for dart here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	"Generate Freezed BLoC version > 8": {
		"prefix": "blocfreezed",
		"body": [
			"import 'package:bloc/bloc.dart';",
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"",
			"part '${1:file_name}.freezed.dart';",
			"",
			"@freezed",
			"class ${2:BlocName}Event with _$${2:BlocName}Event {",
			"  const ${2:BlocName}Event._();",
			"",
			"  const factory ${2:BlocName}Event.load() = Load${2:BlocName}Event;",
			"",
			"  const factory ${2:BlocName}Event.change() = Change${2:BlocName}Event;",
			"",
			"  const factory ${2:BlocName}Event.save() = Save${2:BlocName}Event;",
			"}",
			"",
			"@freezed",
			"class ${2:BlocName}State with _$${2:BlocName}State {",
			"  const ${2:BlocName}State._();",
			"",
			"  const factory ${2:BlocName}State.initial() = Initial${2:BlocName}State;",
			"",
			"  const factory ${2:BlocName}State.loading() = Loading${2:BlocName}State;",
			"",
			"  const factory ${2:BlocName}State.loaded() = Loaded${2:BlocName}State;",
			"",
			"  const factory ${2:BlocName}State.error() = Error${2:BlocName}State;",
			"",
			"  const factory ${2:BlocName}State.idle() = Idle${2:BlocName}State;",
			"}",
			"",
			"class ${2:BlocName}Bloc extends Bloc<${2:BlocName}Event, ${2:BlocName}State> {",
			"  ${2:BlocName}Bloc() : super(const Initial${2:BlocName}State()) {",
			"    on<Load${2:BlocName}Event>(_onLoad${2:BlocName}Event);",
			"    on<Change${2:BlocName}Event>(_onChange${2:BlocName}Event);",
			"    on<Save${2:BlocName}Event>(_onSave${2:BlocName}Event);",
			"  }",
			"$3",
			"  Future<void> _onLoad${2:BlocName}Event(",
			"    Load${2:BlocName}Event event,",
			"    Emitter<${2:BlocName}State> emit,",
			"  ) async {",
			"    emit(const ${2:BlocName}State.loading());",
			"    // ... code",
			"  }",
			"",
			"  Future<void> _onChange${2:BlocName}Event(",
			"    Change${2:BlocName}Event event,",
			"    Emitter<${2:BlocName}State> emit,",
			"  ) async {",
			"    // emit();",
			"  }",
			"",
			"  Future<void> _onSave${2:BlocName}Event(",
			"    Save${2:BlocName}Event event,",
			"    Emitter<${2:BlocName}State> emit,",
			"  ) async {",
			"    // emit();",
			"  }",
			"}"
		]
	},
	"Generate Freezed BLoC version < 8": {
		"prefix": "oldblocfreezed",
		"body": [
			"import 'package:bloc/bloc.dart';",
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"",
			"part '${1:file_name}.freezed.dart';",
			"",
			"@freezed",
			"class ${2:BlocName}Event with _$${2:BlocName}Event {",
			"  const ${2:BlocName}Event._();",
			"",
			"  const factory ${2:BlocName}Event.load() = Load${2:BlocName}Event;",
			"",
			"  const factory ${2:BlocName}Event.change() = Change${2:BlocName}Event;",
			"",
			"  const factory ${2:BlocName}Event.save() = Save${2:BlocName}Event;",
			"}",
			"",
			"@freezed",
			"class ${2:BlocName}State with _$${2:BlocName}State {",
			"  const ${2:BlocName}State._();",
			"",
			"  const factory ${2:BlocName}State.initial() = Initial${2:BlocName}State;",
			"",
			"  const factory ${2:BlocName}State.loading() = Loading${2:BlocName}State;",
			"",
			"  const factory ${2:BlocName}State.loaded() = Loaded${2:BlocName}State;",
			"}",
			"",
			"class ${2:BlocName}BLoC extends Bloc<${2:BlocName}Event, ${2:BlocName}State> {",
			"  ${2:BlocName}BLoC() : super(const Initial${2:BlocName}State());",
			"",
			"  @override",
			"  Stream<${2:BlocName}State> mapEventToState(${2:BlocName}Event event) =>",
			"      event.when<Stream<${2:BlocName}State>>(",
			"        load: _load,",
			"        change: _change,",
			"        save: _save,",
			"      );",
			"$3",
			"  Stream<${2:BlocName}State> _load() async* {",
			"",
			"  }",
			"",
			"  Stream<${2:BlocName}State> _change() async* {",
			"",
			"  }",
			"",
			"  Stream<${2:BlocName}State> _save() async* {",
			"",
			"  }",
			"}"
		]
	},
	"Create Bloc.observer with Crashlytics": {
		"prefix": "blocobsevercrash",
		"body": [
			"class _MainBlocObserver extends BlocObserver {",
			"/* INIT Bloc.observer",
			"if (kDebugMode) {",
			"  Bloc.observer = _MainBlocObserver();",
			"}",
			"*/",
			"  @override",
			"  Future<void> onError(BlocBase bloc, Object error, StackTrace stackTrace) async {",
			"    super.onError(bloc, error, stackTrace);",
			"    await FirebaseCrashlytics.instance",
			"        .recordError(error, stackTrace, reason: 'Crash in bloc: ${bloc.runtimeType} , state: ${bloc.state}');",
			"  }",
			"}",
		]
	},
	"Generate freezed class": {
		"prefix": "freezed",
		"body": [
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"",
			"part '${1:file_name}.freezed.dart';",
			"",
			"@freezed",
			"class ${2:ClassName} with _$${2:ClassName} {",
			"  const factory ${2:ClassName}({",
			"  @Default(1) int? id,",
			"$3",
			"  }) = _${2:ClassName};",
			"}"
		]
	},
	"Generate freezed class with Json": {
		"prefix": "freezedjson",
		"body": [
			"import 'package:freezed_annotation/freezed_annotation.dart';",
			"",
			"part '${1:file_name}.freezed.dart';",
			"part '${1:file_name}.g.dart';",
			"",
			"@freezed",
			"class ${2:ClassName} with _$${2:ClassName} {",
			"  const factory ${2:ClassName}({",
			"  @JsonKey(name: 'id')",
			"  @Default(1) int? id,",
			"$3",
			"  }) = _${2:ClassName};",
			"",
			"  factory ${2:ClassName}.fromJson(Map<String, dynamic> json) => _$${2:ClassName}FromJson(json);",
			"}"
		]
	},
	"Generate Inherited widget": {
		"prefix": "inhw",
		"body": [
			"class ${1:ClassName} extends InheritedWidget {",
			"  const ${1:ClassName}({",
			"    Key? key,",
			"    required Widget child,",
			"  }) : super(key: key, child: child);",
			"",
			"  static ${1:ClassName} of(BuildContext context) {",
			"    final ${1:ClassName}? result = context.dependOnInheritedWidgetOfExactType<${1:ClassName}>();",
			"    assert(result != null, 'No ${1:ClassName} found in context');",
			"    return result!;",
			"  }",
			"",
			"  @override",
			"  bool updateShouldNotify(${1:ClassName} oldWidget) {",
			"    return true;",
			"    }",
			"}"
		]
	}
}